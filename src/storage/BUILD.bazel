load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "compression_scheme",
    srcs = [
        "node_id_compression_scheme.cpp",
    ],
    hdrs = [
        "include/node_id_compression_scheme.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/common:type_utils",
    ],
)

cc_library(
    name = "storage_utils",
    srcs = [
        "storage_utils.cpp",
    ],
    hdrs = [
        "include/storage_utils.h",
    ],
    visibility = [
        "//src/storage/buffer_manager:__pkg__",
        "//src/storage/storage_structure:__pkg__",
    ],
    deps = [
        "//src/catalog:catalog_structs",
        "//src/common:configs",
        "//src/common:null_mask",
        "//src/common:utils",
        "//src/common/types",
        "//src/storage/wal:wal_record",
        "@arrow",
    ],
)

cc_library(
    name = "wal_replayer_utils",
    srcs = [
        "wal_replayer_utils.cpp",
    ],
    hdrs = [
        "include/wal_replayer_utils.h",
    ],
    deps = [
        "//src/catalog",
        "//src/storage/in_mem_storage_structure",
        "//src/storage/index:hash_index_builder",
    ],
)

cc_library(
    name = "storage_manager",
    srcs = [
        "storage_manager.cpp",
        "wal_replayer.cpp",
    ],
    hdrs = [
        "include/storage_manager.h",
        "include/wal_replayer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "wal_replayer_utils",
        "//src/storage/store",
        "//src/storage/wal",
    ],
)

cc_binary(
    name = "arrow",
    srcs = glob(
        [
            "cpp/src/arrow/*.cc",
            "cpp/src/arrow/array/*.cc",
            "cpp/src/arrow/csv/*.cc",
            "cpp/src/arrow/io/*.cc",
            "cpp/src/arrow/ipc/*.cc",
            "cpp/src/arrow/json/*.cc",
            "cpp/src/arrow/tensor/*.cc",
            "cpp/src/arrow/util/*.cc",
            "cpp/src/arrow/vendored/optional.hpp",
            "cpp/src/arrow/vendored/string_view.hpp",
            "cpp/src/arrow/vendored/variant.hpp",
            "cpp/src/arrow/**/*.h",
            "cpp/src/parquet/**/*.h",
            "cpp/src/parquet/**/*.cc",
            "cpp/src/generated/*.h",
            "cpp/src/generated/*.cpp",
            "cpp/thirdparty/flatbuffers/include/flatbuffers/*.h",
        ],
        exclude = [
            "cpp/src/**/*_benchmark.cc",
            "cpp/src/**/*_main.cc",
            "cpp/src/**/*_nossl.cc",
            "cpp/src/**/*_test.cc",
            "cpp/src/**/test_*.cc",
            "cpp/src/**/*hdfs*.cc",
            "cpp/src/**/*fuzz*.cc",
            "cpp/src/**/file_to_stream.cc",
            "cpp/src/**/stream_to_file.cc",
            "cpp/src/arrow/util/bpacking_avx2.cc",
            "cpp/src/arrow/util/bpacking_avx512.cc",
            "cpp/src/arrow/util/bpacking_neon.cc",
            "cpp/src/arrow/util/tracing_internal.cc",
        ],
    ) + select({
        "@bazel_tools//src/conditions:windows": [
            "cpp/src/arrow/vendored/musl/strptime.c",
        ],
        "//conditions:default": [],
    }),
    linkopts = ["-lpthread"],
    deps = [
        "@arrow_thread//:lib",
    ],
    linkstatic = 1,
)
